
Q1. Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be
    non-negative as well. You must not use any built-in exponent function or operator.

Solution -:

def sqrt(n):
	low = 1
	high = n
	if n < 2:
		return n
	while low <= high:
		mid = (low + high) // 2
		if (mid * mid == n):
			return mid
		elif (mid * mid < n):
			low = mid + 1
		else:
			high = mid -1
	return mid

n = 40
print(sqrt(n))



Q2. You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order,
    and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
    You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Solution -:

def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode:
    head = None
    temp = None
    remaining = 0
    while l1 is not None or l2 is not None:
        sum_value = remaining
        if l1 is not None:
            sum_value += l1.val
            l1 = l1.next
        if l2 is not None:
            sum_value += l2.val
            l2 = l2.next
        node = ListNode(sum_value % 10)
        remaining = sum_value // 10
	
        if temp is None:
            temp = head = node
        else:
            temp.next = node
            temp = temp.next
    if remaining > 0:
        temp.next = ListNode(remaining)
    return head
